Syntax
    Lijst-datastructuur [c_1,...,c_n,v_1,...,v_m] (is value v)
    letrec (is computation c)
        -- https://www.cs.cornell.edu/courses/cs6110/2018sp/lectures/lec11.pdf
        letrec f1 = λx1. v1 and ... and fn = λxn. vn in c 
        http://pages.di.unipi.it/corradini/Didattica/PR2-B-14/OpSem.pdf
        https://www.cs.swarthmore.edu/~zpalmer/cs73/s18/book.pdf
        Mike Grant Zachary Palmer Scott Smith, Principles of Programming Languages, Chapter 2
        letrec f x = c1 in c2
    (pc: parallel computation)

Semantiek

    E-Letrec 
    --------------------------------------------------------------------------------
        let rec f = c1 In c2 -> c2[c1[(let rec f = c1 in f)/f]/f]

    E-FwdMap
        (map l2 (y. c1) (l3.c2)) not element of h    (red l1 k -> c) element of h
    -----------------------------------------------------------------------------------
        h # map l2 (y. c1) (l3. c2) -> map l (y. h # c1) (l4. c[l4/l1, (l3. h # c2)/k])

    E-HandMap
                (map l1 p k)  element of h
    -----------------------------------------------------------------------
        h # map l2 (y. c1) (l3. c2) -> c[l/x, (y. h # c1)/p, (l3. h # c2)/k]

    E-DoMap             
    ------------------------------------------------------------------------------------------------------------
        do x <- map (v1:v2:...:vn:[]) (y. c1) (l. c2); c3 -> map (v1:v2:...:vn:[]) (y. c1) (l. do x <- c2; c3)

    E-Map             
    ------------------------------------------------------------------------------------------------------------
        map f (v1:v2:...:vn:[]) -> (f c1):(f c2):...:((f cn):[])

    E-ParList     
        Exist j : !normal cj, ForAll i: ci->ci' <- !normal ci         
    ------------------------------------------------------------------
        (c1:...:ci:...:cn:[]) -> (c1:...:ci':...:cn:[]) 

    E-ListRet
    -------------------------------------------------------------------------------------------------
            ((return v1):(return v2):...:(return vn):[]) -> return (v1:v2:...:vn:[])

    E-Head
    -----------------------------
        head (c1:c) -> return c1

    E-First
    ----------------------------
        fst (x, y) -> return x

    E-Second
    ----------------------------
        snd (x, y) -> return y

    E-Tail
    ----------------------------
        tail (c1:c) -> c

    E-NullTrue
    ---------------------------
        null [] -> return True 

    E-NullFalse
    ---------------------------
        null (c1:c) -> return False

    E-IfTrue
    --------------------------------------
        if True then c1 else c2 -> c1

    E-IfFalse
    --------------------------------------
        if False then c1 else c2 -> c2

    E-If
                        c1->c1'
    -----------------------------------------------------
        if c1 then c2 else c3 -> if c1' then c2 else c3

Calculus
    ParList
    RetList
    -- Lijst values
    -- Lijst computations
    Lijst
    Head
    Tail
    Null
    let rec
    map
    -- map :: (ParallellisableFunction (v->c)) => [v] -> (v->c) -> [c] -- parallel
    reduce :: (ReducingFunction (v->v->v)) => [v] -> (v->v->v) -> v -- parallel
