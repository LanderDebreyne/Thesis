Syntax
    Lijst-datastructuur [c_1,...,c_n,v_1,...,v_m] (is value v)
    letrec (is computation c)
        -- https://www.cs.cornell.edu/courses/cs6110/2018sp/lectures/lec11.pdf
        letrec f1 = λx1. v1 and ... and fn = λxn. vn in c 
        http://pages.di.unipi.it/corradini/Didattica/PR2-B-14/OpSem.pdf
        https://www.cs.swarthmore.edu/~zpalmer/cs73/s18/book.pdf
        Mike Grant Zachary Palmer Scott Smith, Principles of Programming Languages, Chapter 2
        letrec f x = c1 in c2
    (pc: parallel computation)

Semantiek

    E-Letrec 
    --------------------------------------------------------------------------------
        let rec f = c1 In c2 -> c2[c1[(let rec f = c1 in f)/f]/f]

    E-ParList
        1. Exist i: ci->ci', !Exists k<i: ck->ck', ForAll j>i: cj->cj'  
        2. ForAll i: ci->ci' <= ci not normalform             
    ------------------------------------------------------------------
                (c1:ci:c) -> (c1:ci':c')

    E-Map             
    ------------------------------------------------------------------
                map c0 (c1:...:cn) -> (c0 c1:....:c0 cn)

    E-RetList              
    ------------------------------------------------------------------
                (return v1:...: return vn) -> return (v1:....:vn)

    -- Is dit correct?
    -- Lijst met andere normal forms: 
    --      1. Andere handlers handlen tot lijst van returns
    --      2. Handler/programma verkeerd geschreven

    E-Head
    -----------------------------
        head (c1:c) -> return c1

    E-First
    ----------------------------
        fst (x, y) -> return x

    E-Second
    ----------------------------
        snd (x, y) -> return y

    E-Tail
    ----------------------------
        tail (c1:c) -> c

    E-NullTrue
    ---------------------------
        null [] -> return True 

    E-NullFalse
    ---------------------------
        null (c1:c) -> return False

    E-IfTrue
    --------------------------------------
        if True then c1 else c2 -> c1

    E-IfFalse
    --------------------------------------
        if False then c1 else c2 -> c2

    E-If
                        c1->c1'
    -----------------------------------------------------
        if c1 then c2 else c3 -> if c1' then c2 else c3

    -- E-ParDo
    --                          c1->c1', ..., cn->cn', n != 0
    -- ---------------------------------------------------------------------------------
    --     do x <- [c1,...,cn,cn+1,...,cm]; cm+1 -> do x <- [c1',...,cn',cn+1,...,cm]; cm+1

    -- c1->c1', ..., cn->cn', n != 0
    --        [c1,...,cn,cn+1,...,cm]; cm+1 -> [c1',...,cn',cn+1,...,cm]; cm+1

    -- E-RetList
    -- --------------------------------------------------------
    --     [return v1,...,return vn] -> return [v1,...,vn]

Calculus
    ParList
    RetList
    -- Lijst values
    -- Lijst computations
    Lijst
    Head
    Tail
    Null
    let rec
    map
    -- map :: (ParallellisableFunction (v->c)) => [v] -> (v->c) -> [c] -- parallel
    reduce :: (ReducingFunction (v->v->v)) => [v] -> (v->v->v) -> v -- parallel
