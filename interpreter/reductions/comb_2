handler{hPureSc} * handler{hAmbSc} * do d1 <- (op amb ["H","T"] (y. Return y)
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3)))))

1.
{-- E-Hand and E-Hand and E-DoOp --}

handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))))

2.
{-- E-Hand and E-HandOp --}

handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y) (z. Return z)

3.
{-- E-HandSc --}

do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in \ z. handler{hPureSc} * Return z results)

4.
{-- E-Do and E-Binop --}

do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

5.
{-- E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

6.
{-- E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d1 <- (Return "H"
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3)))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

7.
{-- E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

8.
{-- E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

9.
{-- E-Do and E-Do and E-Hand and E-HandOp --}

do results <- (do y <- (handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y) (z. Return z)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

10.
{-- E-Do and E-Do and E-HandSc --}

do results <- (do y <- (do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

11.
{-- E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

12.
{-- E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

13.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d2 <- (Return "H"
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

14.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3)))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

15.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

16.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y) (z. Return z)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

17.
{-- E-Do and E-Do and E-Do and E-Do and E-HandSc --}

do results <- (do y <- (do results <- (do y <- (do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

18.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

19.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

20.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "H"
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3)))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

21.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

22.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "HH"
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

23.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("HH") ("H")
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

24.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "HHH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

25.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * Return "HHH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

26.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do y <- (Return "HHH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

27.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

28.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

29.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

30.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "T"
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3)))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

31.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

32.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "HH"
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

33.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("HH") ("T")
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

34.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "HHT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

35.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * Return "HHT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

36.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (Return "HHT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

37.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("H")
 in AppendS (l1) (d3))) y)
 in Append (["HHT"]) (ys))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

38.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do ys' <- (Return []
 in Append (["HHT"]) (ys))
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

39.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (Append (["HHT"]) ([])
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

40.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (Return ["HHT"]
 in Append (["HHH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

41.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (do results <- (Append (["HHH"]) (["HHT"])
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

42.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do y <- (do results <- (Return ["HHH","HHT"]
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

43.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do y <- (\ z. handler{hPureSc} * Return z ["HHH","HHT"]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

44.
{-- E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * Return ["HHH","HHT"]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

45.
{-- E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do y <- (do results <- (do y <- (Return ["HHH","HHT"]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

46.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

47.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

48.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

49.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d2 <- (Return "T"
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

50.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3)))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

51.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

52.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y) (z. Return z)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

53.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-HandSc --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

54.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

55.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

56.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "H"
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3)))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

57.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

58.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "HT"
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

59.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("HT") ("H")
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

60.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "HTH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

61.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * Return "HTH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

62.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (Return "HTH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

63.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

64.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

65.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

66.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "T"
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3)))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

67.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

68.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "HT"
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

69.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("HT") ("T")
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

70.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "HTT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

71.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * Return "HTT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

72.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (Return "HTT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

73.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("H") ("T")
 in AppendS (l1) (d3))) y)
 in Append (["HTT"]) (ys))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

74.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do ys' <- (Return []
 in Append (["HTT"]) (ys))
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

75.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Append (["HTT"]) ([])
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

76.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Return ["HTT"]
 in Append (["HTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

77.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (Append (["HTH"]) (["HTT"])
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

78.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (Return ["HTH","HTT"]
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

79.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (\ z. handler{hPureSc} * Return z ["HTH","HTT"]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

80.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * Return ["HTH","HTT"]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

81.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do y <- (do results <- (do ys' <- (do y <- (Return ["HTH","HTT"]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

82.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("H") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([["HTH","HTT"]]) (ys))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

83.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (do ys' <- (Return []
 in Append ([["HTH","HTT"]]) (ys))
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

84.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (do ys' <- (Append ([["HTH","HTT"]]) ([])
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

85.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (do ys' <- (Return [["HTH","HTT"]]
 in Append ([["HHH","HHT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

86.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do y <- (do results <- (Append ([["HHH","HHT"]]) ([["HTH","HTT"]])
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

87.
{-- E-Do and E-Do and E-Do and E-Binop --}

do results <- (do y <- (do results <- (Return [["HHH","HHT"],["HTH","HTT"]]
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

88.
{-- E-Do and E-Do and E-DoRet --}

do results <- (do y <- (\ z. handler{hPureSc} * Return z [["HHH","HHT"],["HTH","HTT"]]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

89.
{-- E-Do and E-Do and E-AppAbs --}

do results <- (do y <- (handler{hPureSc} * Return [["HHH","HHT"],["HTH","HTT"]]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

90.
{-- E-Do and E-Do and E-HandRet --}

do results <- (do y <- (Return [["HHH","HHT"],["HTH","HTT"]]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)

91.
{-- E-Do and E-DoRet --}

do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

92.
{-- E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

93.
{-- E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

94.
{-- E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d1 <- (Return "T"
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3)))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

95.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

96.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

97.
{-- E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do results <- (do ys' <- (do y <- (handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y) (z. Return z)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

98.
{-- E-Do and E-Do and E-Do and E-HandSc --}

do results <- (do ys' <- (do y <- (do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

99.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

100.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

101.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d2 <- (Return "H"
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

102.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3)))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

103.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

104.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y) (z. Return z)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

105.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-HandSc --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

106.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

107.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

108.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "H"
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3)))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

109.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

110.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "TH"
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

111.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("TH") ("H")
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

112.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "THH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

113.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (handler{hPureSc} * Return "THH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

114.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do y <- (Return "THH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

115.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

116.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

117.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

118.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "T"
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3)))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

119.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

120.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "TH"
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

121.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("TH") ("T")
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

122.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "THT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

123.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * Return "THT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

124.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do y <- (Return "THT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

125.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("H")
 in AppendS (l1) (d3))) y)
 in Append (["THT"]) (ys))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

126.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (do ys' <- (Return []
 in Append (["THT"]) (ys))
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

127.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (Append (["THT"]) ([])
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

128.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (do ys' <- (Return ["THT"]
 in Append (["THH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

129.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (Append (["THH"]) (["THT"])
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

130.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (do results <- (Return ["THH","THT"]
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

131.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (\ z. handler{hPureSc} * Return z ["THH","THT"]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

132.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * Return ["THH","THT"]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

133.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do y <- (Return ["THH","THT"]
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

134.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

135.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

136.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

137.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d2 <- (Return "T"
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

138.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3)))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

139.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * op amb ["H","T"] (y. do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

140.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * sc for ["H","T"] (y. \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y) (z. Return z)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

141.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandSc --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (Map (["H","T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

142.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

143.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) "H"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

144.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "H"
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3)))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

145.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

146.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "TT"
 in AppendS (l1) ("H"))
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

147.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("TT") ("H")
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

148.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "TTH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

149.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (handler{hPureSc} * Return "TTH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

150.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do y <- (Return "TTH"
 in do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

151.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Map (["T"]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

152.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

153.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) "T"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

154.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do d3 <- (Return "T"
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3)))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

155.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

156.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * do l1 <- (Return "TT"
 in AppendS (l1) ("T"))
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

157.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * AppendS ("TT") ("T")
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

158.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * handler{hAmbSc} * Return "TTT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

159.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * Return "TTT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

160.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (Return "TTT"
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append ([y]) (ys)))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

161.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d3 <- (Return y
 in do l1 <- (AppendS ("T") ("T")
 in AppendS (l1) (d3))) y)
 in Append (["TTT"]) (ys))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

162.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do ys' <- (Return []
 in Append (["TTT"]) (ys))
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

163.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Append (["TTT"]) ([])
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

164.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Return ["TTT"]
 in Append (["TTH"]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

165.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (Append (["TTH"]) (["TTT"])
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

166.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (do results <- (Return ["TTH","TTT"]
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

167.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (\ z. handler{hPureSc} * Return z ["TTH","TTT"]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

168.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (handler{hPureSc} * Return ["TTH","TTT"]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

169.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do y <- (Return ["TTH","TTT"]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([y]) (ys)))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

170.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d2 <- (Return y
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS ("T") (d2)
 in AppendS (l1) (d3)))) y)
 in Append ([["TTH","TTT"]]) (ys))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

171.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (do ys' <- (Return []
 in Append ([["TTH","TTT"]]) (ys))
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

172.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Append ([["TTH","TTT"]]) ([])
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

173.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (do ys' <- (Return [["TTH","TTT"]]
 in Append ([["THH","THT"]]) (ys))
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

174.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (do results <- (Append ([["THH","THT"]]) ([["TTH","TTT"]])
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

175.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do y <- (do results <- (Return [["THH","THT"],["TTH","TTT"]]
 in \ z. handler{hPureSc} * Return z results)
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

176.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do y <- (\ z. handler{hPureSc} * Return z [["THH","THT"],["TTH","TTT"]]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

177.
{-- E-Do and E-Do and E-Do and E-AppAbs --}

do results <- (do ys' <- (do y <- (handler{hPureSc} * Return [["THH","THT"],["TTH","TTT"]]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

178.
{-- E-Do and E-Do and E-Do and E-HandRet --}

do results <- (do ys' <- (do y <- (Return [["THH","THT"],["TTH","TTT"]]
 in do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([y]) (ys)))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

179.
{-- E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (do ys' <- (Map ([]) (\ y. handler{hPureSc} * \ y. handler{hAmbSc} * do d1 <- (Return y
 in do d2 <- (op amb ["H","T"] (y. Return y)
 in do d3 <- (op amb ["H","T"] (y. Return y)
 in do l1 <- (AppendS (d1) (d2)
 in AppendS (l1) (d3))))) y)
 in Append ([[["THH","THT"],["TTH","TTT"]]]) (ys))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

180.
{-- E-Do and E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (do ys' <- (Return []
 in Append ([[["THH","THT"],["TTH","TTT"]]]) (ys))
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

181.
{-- E-Do and E-Do and E-DoRet --}

do results <- (do ys' <- (Append ([[["THH","THT"],["TTH","TTT"]]]) ([])
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

182.
{-- E-Do and E-Do and E-Binop --}

do results <- (do ys' <- (Return [[["THH","THT"],["TTH","TTT"]]]
 in Append ([[["HHH","HHT"],["HTH","HTT"]]]) (ys))
 in \ z. handler{hPureSc} * Return z results)

183.
{-- E-Do and E-DoRet --}

do results <- (Append ([[["HHH","HHT"],["HTH","HTT"]]]) ([[["THH","THT"],["TTH","TTT"]]])
 in \ z. handler{hPureSc} * Return z results)

184.
{-- E-Do and E-Binop --}

do results <- (Return [[["HHH","HHT"],["HTH","HTT"]],[["THH","THT"],["TTH","TTT"]]]
 in \ z. handler{hPureSc} * Return z results)

185.
{-- E-DoRet --}

\ z. handler{hPureSc} * Return z [[["HHH","HHT"],["HTH","HTT"]],[["THH","THT"],["TTH","TTT"]]]

186.
{-- E-AppAbs --}

handler{hPureSc} * Return [[["HHH","HHT"],["HTH","HTT"]],[["THH","THT"],["TTH","TTT"]]]

187.
{-- E-HandRet --}

Return [[["HHH","HHT"],["HTH","HTT"]],[["THH","THT"],["TTH","TTT"]]]

188.
{-- Nothing --}

