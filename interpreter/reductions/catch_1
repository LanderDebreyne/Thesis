handler{hExcept} * do c' <- (handler{hInc} * sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10) (z. Return z)
 in c' 42)

1.
{-- E-Hand and E-Do and E-FwdSc --}

handler{hExcept} * do c' <- (Return \ s. \ pk. do p <- (Fst pk
 in do k <- (Snd pk
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. p b) (z. k z))) (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' s), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))))
 in c' 42)

2.
{-- E-Hand and E-DoRet --}

handler{hExcept} * \ s. \ pk. do p <- (Fst pk
 in do k <- (Snd pk
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. p b) (z. k z))) (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' s), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s')))) 42

3.
{-- E-Hand and E-AppAbs --}

handler{hExcept} * \ pk. do p <- (Fst pk
 in do k <- (Snd pk
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. p b) (z. k z))) (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))))

4.
{-- E-Hand and E-AppAbs --}

handler{hExcept} * do p <- (Fst (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))))
 in do k <- (Snd (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))))
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. p b) (z. k z)))

5.
{-- E-Hand and E-Do and E-Unop --}

handler{hExcept} * do p <- (Return \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42)
 in do k <- (Snd (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))))
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. p b) (z. k z)))

6.
{-- E-Hand and E-DoRet --}

handler{hExcept} * do k <- (Snd (\ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42), \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))))
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b) (z. k z))

7.
{-- E-Hand and E-Do and E-Unop --}

handler{hExcept} * do k <- (Return \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s')))
 in sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b) (z. k z))

8.
{-- E-Hand and E-DoRet --}

handler{hExcept} * sc catch : Tsum Tstr Tunit -> Tunit "Overflow" (b. \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b) (z. \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)

9.
{-- E-HandSc --}

do x <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b True
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

10.
{-- E-Do and E-AppAbs --}

do x <- (handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) True
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

11.
{-- E-Do and E-Hand and E-AppAbs --}

do x <- (handler{hExcept} * do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 True
 in p' 42)
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

12.
{-- E-Do and E-Hand and E-Do and E-AppAbs --}

do x <- (handler{hExcept} * do p' <- (handler{hInc} * 
if True
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10
 in p' 42)
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

13.
{-- E-Do and E-Hand and E-Do and E-Hand and E-IfTrue --}

do x <- (handler{hExcept} * do p' <- (handler{hInc} * do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 in p' 42)
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

14.
{-- E-Do and E-Hand and E-Do and E-Hand and E-DoOp --}

do x <- (handler{hExcept} * do p' <- (handler{hInc} * op inc : Tunit -> Tunit () (y. do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x)))
 in p' 42)
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

15.
{-- E-Do and E-Hand and E-Do and E-HandOp --}

do x <- (handler{hExcept} * do p' <- (Return \ s. do k' <- (\ y. handler{hInc} * do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x)) s
 in do s' <- (Add (s) (1)
 in k' s'))
 in p' 42)
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

16.
{-- E-Do and E-Hand and E-DoRet --}

do x <- (handler{hExcept} * \ s. do k' <- (\ y. handler{hInc} * do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x)) s
 in do s' <- (Add (s) (1)
 in k' s')) 42
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

17.
{-- E-Do and E-Hand and E-AppAbs --}

do x <- (handler{hExcept} * do k' <- (\ y. handler{hInc} * do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x)) 42
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

18.
{-- E-Do and E-Hand and E-Do and E-AppAbs --}

do x <- (handler{hExcept} * do k' <- (handler{hInc} * do x <- (Return 42
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

19.
{-- E-Do and E-Hand and E-Do and E-Hand and E-DoRet --}

do x <- (handler{hExcept} * do k' <- (handler{hInc} * do b <- (Larger (42) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x)
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

20.
{-- E-Do and E-Hand and E-Do and E-Hand and E-Do and E-Binop --}

do x <- (handler{hExcept} * do k' <- (handler{hInc} * do b <- (Return True
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x)
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

21.
{-- E-Do and E-Hand and E-Do and E-Hand and E-DoRet --}

do x <- (handler{hExcept} * do k' <- (handler{hInc} * 
if True
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return True
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

22.
{-- E-Do and E-Hand and E-Do and E-Hand and E-IfTrue --}

do x <- (handler{hExcept} * do k' <- (handler{hInc} * op raise : Tstr -> Tunit "Overflow" (y. undefined)
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

23.
{-- E-Do and E-Hand and E-Do and E-FwdOp --}

do x <- (handler{hExcept} * do k' <- (op raise : Tstr -> Tunit "Overflow" (y. handler{hInc} * undefined)
 in do s' <- (Add (42) (1)
 in k' s'))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

24.
{-- E-Do and E-Hand and E-DoOp --}

do x <- (handler{hExcept} * op raise : Tstr -> Tunit "Overflow" (y. do k' <- (handler{hInc} * undefined
 in do s' <- (Add (42) (1)
 in k' s')))
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

25.
{-- E-Do and E-HandOp --}

do x <- (Return Left "Overflow"
 in do b <- (Eq (x) (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)))

26.
{-- E-DoRet --}

do b <- (Eq (Left "Overflow") (Left "Overflow")
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x Left "Overflow"
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

27.
{-- E-Do and E-Binop --}

do b <- (Return True
 in 
if b
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x Left "Overflow"
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

28.
{-- E-DoRet --}


if True
 then do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))
 else do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x Left "Overflow"
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)

29.
{-- E-IfTrue --}

do y <- (\ b. handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) b False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

30.
{-- E-Do and E-AppAbs --}

do y <- (handler{hExcept} * \ y. do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 y
 in p' 42) False
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

31.
{-- E-Do and E-Hand and E-AppAbs --}

do y <- (handler{hExcept} * do p' <- (\ b. handler{hInc} * 
if b
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10 False
 in p' 42)
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

32.
{-- E-Do and E-Hand and E-Do and E-AppAbs --}

do y <- (handler{hExcept} * do p' <- (handler{hInc} * 
if False
 then do x <- (op inc : Tunit -> Tunit () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise : Tstr -> Tunit "Overflow" (y. undefined)
 else Return x))
 else Return 10
 in p' 42)
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

33.
{-- E-Do and E-Hand and E-Do and E-Hand and E-IfTrue --}

do y <- (handler{hExcept} * do p' <- (handler{hInc} * Return 10
 in p' 42)
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

34.
{-- E-Do and E-Hand and E-Do and E-HandRet --}

do y <- (handler{hExcept} * do p' <- (Return \ s. Return (10, s)
 in p' 42)
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

35.
{-- E-Do and E-Hand and E-DoRet --}

do y <- (handler{hExcept} * \ s. Return (10, s) 42
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

36.
{-- E-Do and E-Hand and E-AppAbs --}

do y <- (handler{hExcept} * Return (10, 42)
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

37.
{-- E-Do and E-HandRet --}

do y <- (Return Right (10, 42)
 in do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x y
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z))

38.
{-- E-DoRet --}

do f' <- (\ z. Return \ k. case z of
 e -> Return Left e 
| x -> k x Right (10, 42)
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)

39.
{-- E-Do and E-AppAbs --}

do f' <- (Return \ k. case Right (10, 42) of
 e -> Return Left e 
| x -> k x
 in f' \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z)

40.
{-- E-DoRet --}

\ k. case Right (10, 42) of
 e -> Return Left e 
| x -> k x \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z

41.
{-- E-AppAbs --}

case Right (10, 42) of
 e -> Return Left e 
| x -> \ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z x

42.
{-- E-CaseRight --}

\ z. handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) z (10, 42)

43.
{-- E-AppAbs --}

handler{hExcept} * \ zs. do z <- (Fst zs
 in do s' <- (Snd zs
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s'))) (10, 42)

44.
{-- E-Hand and E-AppAbs --}

handler{hExcept} * do z <- (Fst (10, 42)
 in do s' <- (Snd (10, 42)
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s')))

45.
{-- E-Hand and E-Do and E-Unop --}

handler{hExcept} * do z <- (Return 10
 in do s' <- (Snd (10, 42)
 in do k' <- (\ z. handler{hInc} * Return z z
 in k' s')))

46.
{-- E-Hand and E-DoRet --}

handler{hExcept} * do s' <- (Snd (10, 42)
 in do k' <- (\ z. handler{hInc} * Return z 10
 in k' s'))

47.
{-- E-Hand and E-Do and E-Unop --}

handler{hExcept} * do s' <- (Return 42
 in do k' <- (\ z. handler{hInc} * Return z 10
 in k' s'))

48.
{-- E-Hand and E-DoRet --}

handler{hExcept} * do k' <- (\ z. handler{hInc} * Return z 10
 in k' 42)

49.
{-- E-Hand and E-Do and E-AppAbs --}

handler{hExcept} * do k' <- (handler{hInc} * Return 10
 in k' 42)

50.
{-- E-Hand and E-Do and E-HandRet --}

handler{hExcept} * do k' <- (Return \ s. Return (10, s)
 in k' 42)

51.
{-- E-Hand and E-DoRet --}

handler{hExcept} * \ s. Return (10, s) 42

52.
{-- E-Hand and E-AppAbs --}

handler{hExcept} * Return (10, 42)

53.
{-- E-HandRet --}

Return Right (10, 42)

54.
{-- Nothing --}

