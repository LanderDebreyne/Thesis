parallel{} * handler{hAccum} * handler{hWeak} * do _ <- (op "accum" "start " (y. Return y)
 in for "for" ["1","2","3","4","5"] (x. do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x))

1.
{-- E-Hand and E-Hand and E-Hand and E-DoOp --}

parallel{} * handler{hAccum} * handler{hWeak} * op "accum" "start " (y. do _ <- (Return y
 in for "for" ["1","2","3","4","5"] (x. do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x)))

2.
{-- E-Hand and E-Hand and E-FwdOp --}

parallel{} * handler{hAccum} * op "accum" "start " (y. handler{hWeak} * do _ <- (Return y
 in for "for" ["1","2","3","4","5"] (x. do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x)))

3.
{-- E-Hand and E-HandOp --}

parallel{} * do k' <- (\ y. handler{hAccum} * handler{hWeak} * do _ <- (Return y
 in for "for" ["1","2","3","4","5"] (x. do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x)) ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

4.
{-- E-Hand and E-Do and E-AppAbs --}

parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * do _ <- (Return ()
 in for "for" ["1","2","3","4","5"] (x. do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

5.
{-- E-Hand and E-Do and E-Hand and E-Hand and E-DoRet --}

parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * for "for" ["1","2","3","4","5"] (x. do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x)
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

6.
{-- E-Hand and E-Do and E-Hand and E-HandFor --}

parallel{} * do k' <- (handler{hAccum} * do results <- (\ l. for "for" l (x. handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x) ["1","2","3","4","5"]
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

7.
{-- E-Hand and E-Do and E-Hand and E-Do and E-AppAbs --}

parallel{} * do k' <- (handler{hAccum} * do results <- (for "for" ["1","2","3","4","5"] (x. handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x)
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

8.
{-- E-Hand and E-Do and E-Hand and E-DoFor --}

parallel{} * do k' <- (handler{hAccum} * for "for" ["1","2","3","4","5"] (x. handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

9.
{-- E-Hand and E-Do and E-HandFor --}

parallel{} * do k' <- (do pairs <- (\ l. for "for" l (x. handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x) ["1","2","3","4","5"]
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

10.
{-- E-Hand and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do pairs <- (for "for" ["1","2","3","4","5"] (x. handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. Return x)
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

11.
{-- E-Hand and E-Do and E-DoFor --}

parallel{} * do k' <- (for "for" ["1","2","3","4","5"] (x. handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

12.
{-- E-Hand and E-DoFor --}

parallel{} * for "for" ["1","2","3","4","5"] (x. handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) (x. do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))))

13.
{-- E-Traverse --}

do result <- (Map (["1","2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

14.
{-- E-Do and E-Binop --}

do result <- (doA y <- (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y)) "1" : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

15.
{-- E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq ("1") ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "1" (y. Return y)) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

16.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Return False
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "1" (y. Return y)) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

17.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * 
if False
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "1" (y. Return y) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

18.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-IfTrue --}

do result <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * op "accum" "1" (y. Return y) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

19.
{-- E-Do and E-Do and E-Hand and E-Hand and E-FwdOp --}

do result <- (doA y <- (parallel{} * handler{hAccum} * op "accum" "1" (y. handler{hWeak} * Return y) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

20.
{-- E-Do and E-Do and E-Hand and E-HandOp --}

do result <- (doA y <- (parallel{} * do k' <- (\ y. handler{hAccum} * handler{hWeak} * Return y ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("1") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

21.
{-- E-Do and E-Do and E-Hand and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * Return ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("1") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

22.
{-- E-Do and E-Do and E-Hand and E-Do and E-Hand and E-HandRet --}

do result <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * Return Right ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("1") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

23.
{-- E-Do and E-Do and E-Hand and E-Do and E-HandRet --}

do result <- (doA y <- (parallel{} * do k' <- (Return ("", Right ())
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("1") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

24.
{-- E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * do m' <- (Fst ("", Right ())
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("1") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

25.
{-- E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA y <- (parallel{} * do m' <- (Return ""
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("1") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

26.
{-- E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("1") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

27.
{-- E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA y <- (parallel{} * do s <- (Return Right ()
 in do m'' <- (AppendS ("1") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

28.
{-- E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * do m'' <- (AppendS ("1") ("")
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

29.
{-- E-Do and E-Do and E-Hand and E-Do and E-Binop --}

do result <- (doA y <- (parallel{} * do m'' <- (Return "1"
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

30.
{-- E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * Return ("1", Right ()) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

31.
{-- E-Do and E-Do and E-HandRet --}

do result <- (doA y <- (Return ("1", Right ()) : Any
 in doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys)))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

32.
{-- E-Do and E-DoRet --}

do result <- (doA ys' <- (Map (["2","3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

33.
{-- E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA y <- (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y)) "2" : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

34.
{-- E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq ("2") ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "2" (y. Return y)) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

35.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Return True
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "2" (y. Return y)) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

36.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * 
if True
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "2" (y. Return y) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

37.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-IfTrue --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

38.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-DoOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * op "accum" "!" (y. do _ <- (Return y
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

39.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-FwdOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * op "accum" "!" (y. handler{hWeak} * do _ <- (Return y
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

40.
{-- E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * do k' <- (\ y. handler{hAccum} * handler{hWeak} * do _ <- (Return y
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y))) ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

41.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * do _ <- (Return ()
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

42.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

43.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-Hand and E-Hand and E-DoOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * op "throw" "error" (y. do _ <- (Return y
 in op "accum" "unreachable" (y. Return y)))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

44.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-Hand and E-HandOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * Return Left "error"
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

45.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * do k' <- (Return ("", Left "error")
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

46.
{-- E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Fst ("", Left "error")
 in do s <- (Snd ("", Left "error")
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

47.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Return ""
 in do s <- (Snd ("", Left "error")
 in do m'' <- (AppendS ("!") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

48.
{-- E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * do s <- (Snd ("", Left "error")
 in do m'' <- (AppendS ("!") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

49.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA y <- (parallel{} * do s <- (Return Left "error"
 in do m'' <- (AppendS ("!") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

50.
{-- E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (AppendS ("!") ("")
 in Return (m'', Left "error")) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

51.
{-- E-Do and E-Do and E-Do and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (Return "!"
 in Return (m'', Left "error")) : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

52.
{-- E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * Return ("!", Left "error") : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

53.
{-- E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA y <- (Return ("!", Left "error") : Any
 in doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

54.
{-- E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (Map (["3","4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

55.
{-- E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y)) "3" : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

56.
{-- E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq ("3") ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "3" (y. Return y)) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

57.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Return False
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "3" (y. Return y)) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

58.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * 
if False
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "3" (y. Return y) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

59.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-IfTrue --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * op "accum" "3" (y. Return y) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

60.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-FwdOp --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * op "accum" "3" (y. handler{hWeak} * Return y) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

61.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (\ y. handler{hAccum} * handler{hWeak} * Return y ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("3") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

62.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * Return ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("3") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

63.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Hand and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * Return Right ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("3") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

64.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (Return ("", Right ())
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("3") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

65.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Fst ("", Right ())
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("3") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

66.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Return ""
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("3") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

67.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("3") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

68.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do s <- (Return Right ()
 in do m'' <- (AppendS ("3") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

69.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (AppendS ("3") ("")
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

70.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (Return "3"
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

71.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * Return ("3", Right ()) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

72.
{-- E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA y <- (Return ("3", Right ()) : Any
 in doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

73.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (Map (["4","5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

74.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y)) "4" : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

75.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq ("4") ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "4" (y. Return y)) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

76.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Return False
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "4" (y. Return y)) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

77.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * 
if False
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "4" (y. Return y) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

78.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-IfTrue --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * op "accum" "4" (y. Return y) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

79.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-FwdOp --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * op "accum" "4" (y. handler{hWeak} * Return y) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

80.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (\ y. handler{hAccum} * handler{hWeak} * Return y ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("4") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

81.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * Return ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("4") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

82.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Hand and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * Return Right ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("4") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

83.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (Return ("", Right ())
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("4") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

84.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Fst ("", Right ())
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("4") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

85.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Return ""
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("4") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

86.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("4") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

87.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do s <- (Return Right ()
 in do m'' <- (AppendS ("4") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

88.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (AppendS ("4") ("")
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

89.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (Return "4"
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

90.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * Return ("4", Right ()) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

91.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Return ("4", Right ()) : Any
 in doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

92.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Map (["5"]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

93.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y)) "5" : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

94.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq ("5") ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "5" (y. Return y)) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

95.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Return False
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "5" (y. Return y)) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

96.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * 
if False
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" "5" (y. Return y) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

97.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Hand and E-IfTrue --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * handler{hWeak} * op "accum" "5" (y. Return y) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

98.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-FwdOp --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * handler{hAccum} * op "accum" "5" (y. handler{hWeak} * Return y) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

99.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandOp --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (\ y. handler{hAccum} * handler{hWeak} * Return y ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("5") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

100.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * handler{hWeak} * Return ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("5") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

101.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Hand and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (handler{hAccum} * Return Right ()
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("5") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

102.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do k' <- (Return ("", Right ())
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("5") (m')
 in Return (m'', s))))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

103.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Fst ("", Right ())
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("5") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

104.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m' <- (Return ""
 in do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("5") (m')
 in Return (m'', s)))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

105.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do s <- (Snd ("", Right ())
 in do m'' <- (AppendS ("5") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

106.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do s <- (Return Right ()
 in do m'' <- (AppendS ("5") ("")
 in Return (m'', s))) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

107.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (AppendS ("5") ("")
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

108.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * do m'' <- (Return "5"
 in Return (m'', Right ())) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

109.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (parallel{} * Return ("5", Right ()) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

110.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Return ("5", Right ()) : Any
 in doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

111.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([]) (\ x. parallel{} * handler{hAccum} * handler{hWeak} * do eq2 <- (Eq (x) ("2")
 in 
if eq2
 then do _ <- (op "accum" "!" (y. Return y)
 in do _ <- (op "throw" "error" (y. Return y)
 in op "accum" "unreachable" (y. Return y)))
 else op "accum" x (y. Return y))) : Tlist Any
 in Append ([("5", Right ())]) (ys)) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

112.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [] : Tlist Any
 in Append ([("5", Right ())]) (ys)) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

113.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Append ([("5", Right ())]) ([]) : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

114.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [("5", Right ())] : Tlist Any
 in Append ([("4", Right ())]) (ys)) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

115.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (Append ([("4", Right ())]) ([("5", Right ())]) : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

116.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [("4", Right ()),("5", Right ())] : Tlist Any
 in Append ([("3", Right ())]) (ys)) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

117.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (Append ([("3", Right ())]) ([("4", Right ()),("5", Right ())]) : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

118.
{-- E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (Return [("3", Right ()),("4", Right ()),("5", Right ())] : Tlist Any
 in Append ([("!", Left "error")]) (ys)) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

119.
{-- E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (Append ([("!", Left "error")]) ([("3", Right ()),("4", Right ()),("5", Right ())]) : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

120.
{-- E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (Return [("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())] : Tlist Any
 in Append ([("1", Right ())]) (ys))
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

121.
{-- E-Do and E-DoRet --}

do result <- (Append ([("1", Right ())]) ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())])
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

122.
{-- E-Do and E-Binop --}

do result <- (Return [("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]
 in \ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) result)

123.
{-- E-DoRet --}

\ x. parallel{} * do k' <- (do pairs <- (Return x
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))) [("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]

124.
{-- E-AppAbs --}

parallel{} * do k' <- (do pairs <- (Return [("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]
 in do first <- (Map (pairs) (\ l. Fst l)
 in do second <- (Map (pairs) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

125.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l)
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

126.
{-- E-Hand and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA y <- (\ l. Fst l ("1", Right ()) : Any
 in doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys)))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

127.
{-- E-Hand and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do first <- (doA y <- (Fst ("1", Right ()) : Any
 in doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys)))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

128.
{-- E-Hand and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do first <- (doA y <- (Return "1" : Any
 in doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys)))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

129.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

130.
{-- E-Hand and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA y <- (\ l. Fst l ("!", Left "error") : Any
 in doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

131.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA y <- (Fst ("!", Left "error") : Any
 in doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

132.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA y <- (Return "!" : Any
 in doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

133.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

134.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA y <- (\ l. Fst l ("3", Right ()) : Any
 in doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

135.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA y <- (Fst ("3", Right ()) : Any
 in doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

136.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA y <- (Return "3" : Any
 in doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

137.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

138.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (\ l. Fst l ("4", Right ()) : Any
 in doA ys' <- (Map ([("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

139.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Fst ("4", Right ()) : Any
 in doA ys' <- (Map ([("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

140.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Return "4" : Any
 in doA ys' <- (Map ([("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

141.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([("5", Right ())]) (\ l. Fst l) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

142.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (\ l. Fst l ("5", Right ()) : Any
 in doA ys' <- (Map ([]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

143.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Fst ("5", Right ()) : Any
 in doA ys' <- (Map ([]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

144.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Return "5" : Any
 in doA ys' <- (Map ([]) (\ l. Fst l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

145.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([]) (\ l. Fst l) : Tlist Any
 in Append (["5"]) (ys)) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

146.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [] : Tlist Any
 in Append (["5"]) (ys)) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

147.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Append (["5"]) ([]) : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

148.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Return ["5"] : Tlist Any
 in Append (["4"]) (ys)) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

149.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (Append (["4"]) (["5"]) : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

150.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (doA ys' <- (Return ["4","5"] : Tlist Any
 in Append (["3"]) (ys)) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

151.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (Append (["3"]) (["4","5"]) : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

152.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (doA ys' <- (Return ["3","4","5"] : Tlist Any
 in Append (["!"]) (ys)) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

153.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (doA ys' <- (Append (["!"]) (["3","4","5"]) : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

154.
{-- E-Hand and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (doA ys' <- (Return ["!","3","4","5"] : Tlist Any
 in Append (["1"]) (ys))
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

155.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do first <- (Append (["1"]) (["!","3","4","5"])
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

156.
{-- E-Hand and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do first <- (Return ["1","!","3","4","5"]
 in do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce first
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

157.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (Map ([("1", Right ()),("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l)
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

158.
{-- E-Hand and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA y <- (\ l. Snd l ("1", Right ()) : Any
 in doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys)))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

159.
{-- E-Hand and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do second <- (doA y <- (Snd ("1", Right ()) : Any
 in doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys)))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

160.
{-- E-Hand and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do second <- (doA y <- (Return Right () : Any
 in doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys)))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

161.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (Map ([("!", Left "error"),("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

162.
{-- E-Hand and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA y <- (\ l. Snd l ("!", Left "error") : Any
 in doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

163.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA y <- (Snd ("!", Left "error") : Any
 in doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

164.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA y <- (Return Left "error" : Any
 in doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

165.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (Map ([("3", Right ()),("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

166.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA y <- (\ l. Snd l ("3", Right ()) : Any
 in doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

167.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA y <- (Snd ("3", Right ()) : Any
 in doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

168.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA y <- (Return Right () : Any
 in doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

169.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([("4", Right ()),("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

170.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (\ l. Snd l ("4", Right ()) : Any
 in doA ys' <- (Map ([("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

171.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Snd ("4", Right ()) : Any
 in doA ys' <- (Map ([("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

172.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Return Right () : Any
 in doA ys' <- (Map ([("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

173.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([("5", Right ())]) (\ l. Snd l) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

174.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (\ l. Snd l ("5", Right ()) : Any
 in doA ys' <- (Map ([]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

175.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Snd ("5", Right ()) : Any
 in doA ys' <- (Map ([]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

176.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA y <- (Return Right () : Any
 in doA ys' <- (Map ([]) (\ l. Snd l) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

177.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Map ([]) (\ l. Snd l) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

178.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [] : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

179.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Append ([Right ()]) ([]) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

180.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [Right ()] : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

181.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (Append ([Right ()]) ([Right ()]) : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

182.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (doA ys' <- (Return [Right (),Right ()] : Tlist Any
 in Append ([Right ()]) (ys)) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

183.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (Append ([Right ()]) ([Right (),Right ()]) : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

184.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (doA ys' <- (Return [Right (),Right (),Right ()] : Tlist Any
 in Append ([Left "error"]) (ys)) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

185.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (doA ys' <- (Append ([Left "error"]) ([Right (),Right (),Right ()]) : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

186.
{-- E-Hand and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (doA ys' <- (Return [Left "error",Right (),Right (),Right ()] : Tlist Any
 in Append ([Right ()]) (ys))
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

187.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do second <- (Append ([Right ()]) ([Left "error",Right (),Right (),Right ()])
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

188.
{-- E-Hand and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do second <- (Return [Right (),Left "error",Right (),Right (),Right ()]
 in do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) second
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

189.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (do k' <- (\ x. handler{hAccum} * do results <- (Return x
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)) [Right (),Left "error",Right (),Right (),Right ()]
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

190.
{-- E-Hand and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do k' <- (handler{hAccum} * do results <- (Return [Right (),Left "error",Right (),Right (),Right ()]
 in do FirstFail <- (FirstFail results
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t))
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

191.
{-- E-Hand and E-Do and E-Do and E-Hand and E-DoRet --}

parallel{} * do k' <- (do k' <- (handler{hAccum} * do FirstFail <- (FirstFail [Right (),Left "error",Right (),Right (),Right ()]
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

192.
{-- E-Hand and E-Do and E-Do and E-Hand and E-Do and E-Unop --}

parallel{} * do k' <- (do k' <- (handler{hAccum} * do FirstFail <- (Return Left "error"
 in case FirstFail of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t)
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

193.
{-- E-Hand and E-Do and E-Do and E-Hand and E-DoRet --}

parallel{} * do k' <- (do k' <- (handler{hAccum} * case Left "error" of
 error -> Return Left error 
| t -> \ x. handler{hWeak} * Return x t
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

194.
{-- E-Hand and E-Do and E-Do and E-Hand and E-CaseLeft --}

parallel{} * do k' <- (do k' <- (handler{hAccum} * Return Left "error"
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

195.
{-- E-Hand and E-Do and E-Do and E-HandRet --}

parallel{} * do k' <- (do k' <- (Return ("", Left "error")
 in letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst k'
 in do k'' <- (Snd k'
 in do res <- (AppendS (base) (rest)
 in Return (res, k''))))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

196.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (letrec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do rest <- (reduce ["1","!","3","4","5"]
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

197.
{-- E-Hand and E-Do and E-LetRec --}

parallel{} * do k' <- (do rest <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["1","!","3","4","5"]
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

198.
{-- E-Hand and E-Do and E-Do and E-AppRec --}

parallel{} * do k' <- (do rest <- (\ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["1","!","3","4","5"]
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

199.
{-- E-Hand and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do rest <- (do n <- (Empty ["1","!","3","4","5"]
 in 
if n
 then Return ""
 else do h <- (Head ["1","!","3","4","5"]
 in do t <- (Tail ["1","!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

200.
{-- E-Hand and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do n <- (Return False
 in 
if n
 then Return ""
 else do h <- (Head ["1","!","3","4","5"]
 in do t <- (Tail ["1","!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

201.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (
if False
 then Return ""
 else do h <- (Head ["1","!","3","4","5"]
 in do t <- (Tail ["1","!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

202.
{-- E-Hand and E-Do and E-Do and E-IfTrue --}

parallel{} * do k' <- (do rest <- (do h <- (Head ["1","!","3","4","5"]
 in do t <- (Tail ["1","!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

203.
{-- E-Hand and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do h <- (Return "1"
 in do t <- (Tail ["1","!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

204.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do t <- (Tail ["1","!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("1") (y)
 in Return x)))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

205.
{-- E-Hand and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do t <- (Return ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("1") (y)
 in Return x)))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

206.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["!","3","4","5"]
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

207.
{-- E-Hand and E-Do and E-Do and E-Do and E-AppRec --}

parallel{} * do k' <- (do rest <- (do y <- (\ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["!","3","4","5"]
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

208.
{-- E-Hand and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do rest <- (do y <- (do n <- (Empty ["!","3","4","5"]
 in 
if n
 then Return ""
 else do h <- (Head ["!","3","4","5"]
 in do t <- (Tail ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

209.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do n <- (Return False
 in 
if n
 then Return ""
 else do h <- (Head ["!","3","4","5"]
 in do t <- (Tail ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

210.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (
if False
 then Return ""
 else do h <- (Head ["!","3","4","5"]
 in do t <- (Tail ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

211.
{-- E-Hand and E-Do and E-Do and E-Do and E-IfTrue --}

parallel{} * do k' <- (do rest <- (do y <- (do h <- (Head ["!","3","4","5"]
 in do t <- (Tail ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

212.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do h <- (Return "!"
 in do t <- (Tail ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

213.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do t <- (Tail ["!","3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("!") (y)
 in Return x)))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

214.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do t <- (Return ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("!") (y)
 in Return x)))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

215.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["3","4","5"]
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

216.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-AppRec --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (\ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["3","4","5"]
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

217.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do n <- (Empty ["3","4","5"]
 in 
if n
 then Return ""
 else do h <- (Head ["3","4","5"]
 in do t <- (Tail ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

218.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do n <- (Return False
 in 
if n
 then Return ""
 else do h <- (Head ["3","4","5"]
 in do t <- (Tail ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

219.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (
if False
 then Return ""
 else do h <- (Head ["3","4","5"]
 in do t <- (Tail ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

220.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-IfTrue --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do h <- (Head ["3","4","5"]
 in do t <- (Tail ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

221.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do h <- (Return "3"
 in do t <- (Tail ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

222.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do t <- (Tail ["3","4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("3") (y)
 in Return x)))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

223.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do t <- (Return ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("3") (y)
 in Return x)))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

224.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["4","5"]
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

225.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppRec --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (\ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["4","5"]
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

226.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do n <- (Empty ["4","5"]
 in 
if n
 then Return ""
 else do h <- (Head ["4","5"]
 in do t <- (Tail ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

227.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do n <- (Return False
 in 
if n
 then Return ""
 else do h <- (Head ["4","5"]
 in do t <- (Tail ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

228.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (
if False
 then Return ""
 else do h <- (Head ["4","5"]
 in do t <- (Tail ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

229.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-IfTrue --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do h <- (Head ["4","5"]
 in do t <- (Tail ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

230.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do h <- (Return "4"
 in do t <- (Tail ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

231.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do t <- (Tail ["4","5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("4") (y)
 in Return x)))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

232.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do t <- (Return ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("4") (y)
 in Return x)))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

233.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["5"]
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

234.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppRec --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (\ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))) ["5"]
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

235.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do n <- (Empty ["5"]
 in 
if n
 then Return ""
 else do h <- (Head ["5"]
 in do t <- (Tail ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

236.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do n <- (Return False
 in 
if n
 then Return ""
 else do h <- (Head ["5"]
 in do t <- (Tail ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

237.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (
if False
 then Return ""
 else do h <- (Head ["5"]
 in do t <- (Tail ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

238.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-IfTrue --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do h <- (Head ["5"]
 in do t <- (Tail ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

239.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do h <- (Return "5"
 in do t <- (Tail ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

240.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do t <- (Tail ["5"]
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("5") (y)
 in Return x)))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

241.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do t <- (Return []
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS ("5") (y)
 in Return x)))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

242.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) []
 in do x <- (AppendS ("5") (y)
 in Return x))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

243.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppRec --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do y <- (\ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))) []
 in do x <- (AppendS ("5") (y)
 in Return x))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

244.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do y <- (do n <- (Empty []
 in 
if n
 then Return ""
 else do h <- (Head []
 in do t <- (Tail []
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("5") (y)
 in Return x))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

245.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do y <- (do n <- (Return True
 in 
if n
 then Return ""
 else do h <- (Head []
 in do t <- (Tail []
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x)))))
 in do x <- (AppendS ("5") (y)
 in Return x))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

246.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do y <- (
if True
 then Return ""
 else do h <- (Head []
 in do t <- (Tail []
 in do y <- (rec reduce = \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) in \ l. do n <- (Empty l
 in 
if n
 then Return ""
 else do h <- (Head l
 in do t <- (Tail l
 in do y <- (reduce t
 in do x <- (AppendS (h) (y)
 in Return x))))) t
 in do x <- (AppendS (h) (y)
 in Return x))))
 in do x <- (AppendS ("5") (y)
 in Return x))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

247.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-IfTrue --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do y <- (Return ""
 in do x <- (AppendS ("5") (y)
 in Return x))
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

248.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do x <- (AppendS ("5") ("")
 in Return x)
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

249.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (do x <- (Return "5"
 in Return x)
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

250.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do y <- (Return "5"
 in do x <- (AppendS ("4") (y)
 in Return x))
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

251.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do x <- (AppendS ("4") ("5")
 in Return x)
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

252.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (do x <- (Return "45"
 in Return x)
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

253.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do y <- (Return "45"
 in do x <- (AppendS ("3") (y)
 in Return x))
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

254.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do x <- (AppendS ("3") ("45")
 in Return x)
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

255.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (do x <- (Return "345"
 in Return x)
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

256.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do y <- (Return "345"
 in do x <- (AppendS ("!") (y)
 in Return x))
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

257.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (do x <- (AppendS ("!") ("345")
 in Return x)
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

258.
{-- E-Hand and E-Do and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do rest <- (do y <- (do x <- (Return "!345"
 in Return x)
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

259.
{-- E-Hand and E-Do and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do y <- (Return "!345"
 in do x <- (AppendS ("1") (y)
 in Return x))
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

260.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (do x <- (AppendS ("1") ("!345")
 in Return x)
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

261.
{-- E-Hand and E-Do and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do rest <- (do x <- (Return "1!345"
 in Return x)
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

262.
{-- E-Hand and E-Do and E-Do and E-DoRet --}

parallel{} * do k' <- (do rest <- (Return "1!345"
 in do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) (rest)
 in Return (res, k'')))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

263.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (do base <- (Fst ("", Left "error")
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) ("1!345")
 in Return (res, k''))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

264.
{-- E-Hand and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do base <- (Return ""
 in do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS (base) ("1!345")
 in Return (res, k''))))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

265.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (do k'' <- (Snd ("", Left "error")
 in do res <- (AppendS ("") ("1!345")
 in Return (res, k'')))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

266.
{-- E-Hand and E-Do and E-Do and E-Unop --}

parallel{} * do k' <- (do k'' <- (Return Left "error"
 in do res <- (AppendS ("") ("1!345")
 in Return (res, k'')))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

267.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (do res <- (AppendS ("") ("1!345")
 in Return (res, Left "error"))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

268.
{-- E-Hand and E-Do and E-Do and E-Binop --}

parallel{} * do k' <- (do res <- (Return "1!345"
 in Return (res, Left "error"))
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

269.
{-- E-Hand and E-Do and E-DoRet --}

parallel{} * do k' <- (Return ("1!345", Left "error")
 in do m' <- (Fst k'
 in do s <- (Snd k'
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s)))))

270.
{-- E-Hand and E-DoRet --}

parallel{} * do m' <- (Fst ("1!345", Left "error")
 in do s <- (Snd ("1!345", Left "error")
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))

271.
{-- E-Hand and E-Do and E-Unop --}

parallel{} * do m' <- (Return "1!345"
 in do s <- (Snd ("1!345", Left "error")
 in do m'' <- (AppendS ("start ") (m')
 in Return (m'', s))))

272.
{-- E-Hand and E-DoRet --}

parallel{} * do s <- (Snd ("1!345", Left "error")
 in do m'' <- (AppendS ("start ") ("1!345")
 in Return (m'', s)))

273.
{-- E-Hand and E-Do and E-Unop --}

parallel{} * do s <- (Return Left "error"
 in do m'' <- (AppendS ("start ") ("1!345")
 in Return (m'', s)))

274.
{-- E-Hand and E-DoRet --}

parallel{} * do m'' <- (AppendS ("start ") ("1!345")
 in Return (m'', Left "error"))

275.
{-- E-Hand and E-Do and E-Binop --}

parallel{} * do m'' <- (Return "start 1!345"
 in Return (m'', Left "error"))

276.
{-- E-Hand and E-DoRet --}

parallel{} * Return ("start 1!345", Left "error")

277.
{-- E-HandRet --}

Return ("start 1!345", Left "error")

278.
{-- Nothing --}

