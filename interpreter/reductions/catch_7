handler{hExcept} * do c' <- (handler{hInc} * do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in c' 42)

1.
{-- E-Hand and E-Do and E-Hand and E-Do and E-DoOp --}

handler{hExcept} * do c' <- (handler{hInc} * do _ <- (op inc () (y. do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x)))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in c' 42)

2.
{-- E-Hand and E-Do and E-Hand and E-DoOp --}

handler{hExcept} * do c' <- (handler{hInc} * op inc () (y. do _ <- (do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z)))
 in c' 42)

3.
{-- E-Hand and E-Do and E-HandOp --}

handler{hExcept} * do c' <- (Return \ s. do k' <- (\ y. handler{hInc} * do _ <- (do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z)) s
 in do s' <- (Add (s) (1)
 in k' s'))
 in c' 42)

4.
{-- E-Hand and E-DoRet --}

handler{hExcept} * \ s. do k' <- (\ y. handler{hInc} * do _ <- (do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z)) s
 in do s' <- (Add (s) (1)
 in k' s')) 42

5.
{-- E-Hand and E-AppAbs --}

handler{hExcept} * do k' <- (\ y. handler{hInc} * do _ <- (do x <- (Return y
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z)) 42
 in do s' <- (Add (42) (1)
 in k' s'))

6.
{-- E-Hand and E-Do and E-AppAbs --}

handler{hExcept} * do k' <- (handler{hInc} * do _ <- (do x <- (Return 42
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in do s' <- (Add (42) (1)
 in k' s'))

7.
{-- E-Hand and E-Do and E-Hand and E-Do and E-DoRet --}

handler{hExcept} * do k' <- (handler{hInc} * do _ <- (do b <- (Larger (42) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return 42)
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in do s' <- (Add (42) (1)
 in k' s'))

8.
{-- E-Hand and E-Do and E-Hand and E-Do and E-Do and E-Binop --}

handler{hExcept} * do k' <- (handler{hInc} * do _ <- (do b <- (Return True
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return 42)
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in do s' <- (Add (42) (1)
 in k' s'))

9.
{-- E-Hand and E-Do and E-Hand and E-Do and E-DoRet --}

handler{hExcept} * do k' <- (handler{hInc} * do _ <- (
if True
 then op raise "Overflow" (y. Return y)
 else Return 42
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in do s' <- (Add (42) (1)
 in k' s'))

10.
{-- E-Hand and E-Do and E-Hand and E-Do and E-IfTrue --}

handler{hExcept} * do k' <- (handler{hInc} * do _ <- (op raise "Overflow" (y. Return y)
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in do s' <- (Add (42) (1)
 in k' s'))

11.
{-- E-Hand and E-Do and E-Hand and E-DoOp --}

handler{hExcept} * do k' <- (handler{hInc} * op raise "Overflow" (y. do _ <- (Return y
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z)))
 in do s' <- (Add (42) (1)
 in k' s'))

12.
{-- E-Hand and E-Do and E-FwdOp --}

handler{hExcept} * do k' <- (op raise "Overflow" (y. handler{hInc} * do _ <- (Return y
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z)))
 in do s' <- (Add (42) (1)
 in k' s'))

13.
{-- E-Hand and E-DoOp --}

handler{hExcept} * op raise "Overflow" (y. do k' <- (handler{hInc} * do _ <- (Return y
 in sc catch "Overflow" (b. 
if b
 then do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in do _ <- (do x <- (op inc () (y. Return y)
 in do b <- (Larger (x) (10)
 in 
if b
 then op raise "Overflow" (y. Return y)
 else Return x))
 in Return "success")))
 else Return "fail") (z. Return z))
 in do s' <- (Add (42) (1)
 in k' s')))

14.
{-- E-HandOp --}

Return Left "Overflow"

15.
{-- Nothing --}

