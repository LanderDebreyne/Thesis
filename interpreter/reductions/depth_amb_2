parallel{} * handler{hAmb} * do f <- (handler{hDepthAmb2} * sc "depth" 1 (_. do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3))) (x. do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))))
 in f 2)

1.
{-- E-Hand and E-Hand and E-Do and E-HandSc --}

parallel{} * handler{hAmb} * do f <- (Return \ d. do p' <- (\ _. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) ()
 in do md <- (Min (1) (d)
 in do xs <- (p' md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (d) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))))
 in f 2)

2.
{-- E-Hand and E-Hand and E-DoRet --}

parallel{} * handler{hAmb} * \ d. do p' <- (\ _. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) ()
 in do md <- (Min (1) (d)
 in do xs <- (p' md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (d) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))))) 2

3.
{-- E-Hand and E-Hand and E-AppAbs --}

parallel{} * handler{hAmb} * do p' <- (\ _. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) ()
 in do md <- (Min (1) (2)
 in do xs <- (p' md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))))

4.
{-- E-Hand and E-Hand and E-Do and E-AppAbs --}

parallel{} * handler{hAmb} * do p' <- (handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3))
 in do md <- (Min (1) (2)
 in do xs <- (p' md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))))

5.
{-- E-Hand and E-Hand and E-Do and E-Hand and E-DoOp --}

parallel{} * handler{hAmb} * do p' <- (handler{hDepthAmb2} * op "choose" () (y. do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)))
 in do md <- (Min (1) (2)
 in do xs <- (p' md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))))

6.
{-- E-Hand and E-Hand and E-Do and E-HandOp --}

parallel{} * handler{hAmb} * do p' <- (Return \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (d) (-1)
 in k1 d'))))
 in do md <- (Min (1) (2)
 in do xs <- (p' md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))))

7.
{-- E-Hand and E-Hand and E-DoRet --}

parallel{} * handler{hAmb} * do md <- (Min (1) (2)
 in do xs <- (\ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))))

8.
{-- E-Hand and E-Hand and E-Do and E-Binop --}

parallel{} * handler{hAmb} * do md <- (Return 1
 in do xs <- (\ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) md
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (md) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))))

9.
{-- E-Hand and E-Hand and E-DoRet --}

parallel{} * handler{hAmb} * do xs <- (\ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) 1
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))

10.
{-- E-Hand and E-Hand and E-Do and E-AppAbs --}

parallel{} * handler{hAmb} * do xs <- (do b <- (Eq (1) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d'))))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))

11.
{-- E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

parallel{} * handler{hAmb} * do xs <- (do b <- (Return False
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d'))))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))

12.
{-- E-Hand and E-Hand and E-Do and E-DoRet --}

parallel{} * handler{hAmb} * do xs <- (
if False
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))

13.
{-- E-Hand and E-Hand and E-Do and E-IfTrue --}

parallel{} * handler{hAmb} * do xs <- (do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))

14.
{-- E-Hand and E-Hand and E-Do and E-DoOp --}

parallel{} * handler{hAmb} * do xs <- (op "amb" [True,False] (y. do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d'))))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))))

15.
{-- E-Hand and E-Hand and E-DoOp --}

parallel{} * handler{hAmb} * op "amb" [True,False] (y. do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))))

16.
{-- E-Hand and E-HandOp --}

parallel{} * for "for" [True,False] (y. \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) (z. Return z)

17.
{-- E-Traverse --}

do result <- (Map ([True,False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y)
 in \ z. parallel{} * Return z result)

18.
{-- E-Do and E-Binop --}

do result <- (doA y <- (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y True : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

19.
{-- E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) True : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

20.
{-- E-Do and E-Do and E-Hand and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do b1 <- (Return True
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

21.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) True
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

22.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * do b <- (Return True
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

23.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * 
if True
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

24.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-IfTrue --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * Return 1
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

25.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-HandRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (Return \ d. Return [(1, d)]
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

26.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do d' <- (Add (1) (-1)
 in \ d. Return [(1, d)] d')
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

27.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do d' <- (Return 0
 in \ d. Return [(1, d)] d')
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

28.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (\ d. Return [(1, d)] 0
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

29.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (Return [(1, 0)]
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

30.
{-- E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * ConcatMap ([(1, 0)]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

31.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))) (1, 0) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

32.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do v <- (Fst (1, 0)
 in do rd <- (Snd (1, 0)
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

33.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Unop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do v <- (Return 1
 in do rd <- (Snd (1, 0)
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

34.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do rd <- (Snd (1, 0)
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' trued)))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

35.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Unop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do rd <- (Return 0
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' trued)))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

36.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do consumed <- (Minus (1) (0)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' trued))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

37.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do consumed <- (Return 1
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' trued))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

38.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do trued <- (Minus (2) (1)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' trued)) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

39.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do trued <- (Return 1
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' trued)) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

40.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) 1
 in k' 1) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

41.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do k' <- (handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)))
 in k' 1) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

42.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoOp --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do k' <- (handler{hDepthAmb2} * op "choose" () (y. do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))))
 in k' 1) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

43.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-HandOp --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do k' <- (Return \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (d) (-1)
 in k1 d'))))
 in k' 1) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

44.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (\ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) 1 : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

45.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do b <- (Eq (1) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

46.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do b <- (Return False
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

47.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (
if False
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d'))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

48.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-IfTrue --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d'))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

49.
{-- E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoOp --}

do result <- (doA y <- (parallel{} * handler{hAmb} * doA as <- (op "amb" [True,False] (y. do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))) : Any
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

50.
{-- E-Do and E-Do and E-Hand and E-Hand and E-DoOp --}

do result <- (doA y <- (parallel{} * handler{hAmb} * op "amb" [True,False] (y. do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as')))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

51.
{-- E-Do and E-Do and E-Hand and E-HandOp --}

do result <- (doA y <- (parallel{} * for "for" [True,False] (y. \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) (z. Return z) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

52.
{-- E-Do and E-Do and E-Traverse --}

do result <- (doA y <- (do result <- (Map ([True,False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y)
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

53.
{-- E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA y <- (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y True : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

54.
{-- E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) True : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

55.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do b1 <- (Return True
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

56.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) True
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

57.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * do b <- (Return True
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

58.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * 
if True
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

59.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-IfTrue --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * Return 1
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

60.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-HandRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (Return \ d. Return [(1, d)]
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

61.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do d' <- (Add (1) (-1)
 in \ d. Return [(1, d)] d')
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

62.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do d' <- (Return 0
 in \ d. Return [(1, d)] d')
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

63.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (\ d. Return [(1, d)] 0
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

64.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-AppAbs --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * do as <- (Return [(1, 0)]
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

65.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append ([(1, 0)]) (as')) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

66.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * doA as' <- (Return [] : Any
 in Append ([(1, 0)]) (as')) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

67.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * Append ([(1, 0)]) ([]) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

68.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * handler{hAmb} * Return [(1, 0)] : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

69.
{-- E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do result <- (doA y <- (do result <- (doA y <- (parallel{} * Return [(1, 0)] : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

70.
{-- E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA y <- (do result <- (doA y <- (Return [(1, 0)] : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

71.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

72.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y False : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

73.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) False : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

74.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do b1 <- (Return False
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

75.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) False
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

76.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * do b <- (Return False
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

77.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * 
if False
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

78.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-IfTrue --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

79.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoOp --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (handler{hDepthAmb2} * op "choose" () (y. do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

80.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-HandOp --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do k1 <- (Return \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (d) (-1)
 in k1 d'))))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

81.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do d' <- (Add (1) (-1)
 in \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) d')
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

82.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do d' <- (Return 0
 in \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) d')
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

83.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (\ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) 0
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

84.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-AppAbs --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do b <- (Eq (0) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (0) (-1)
 in k1 d'))))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

85.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (do b <- (Return True
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (0) (-1)
 in k1 d'))))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

86.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (
if True
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6)) b1
 in do d' <- (Add (0) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

87.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-IfTrue --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do as <- (Return []
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

88.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append ([]) (as')) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

89.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * doA as' <- (Return [] : Any
 in Append ([]) (as')) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

90.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * Append ([]) ([]) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

91.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * Return [] : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

92.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (parallel{} * Return [] : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

93.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA y <- (Return [] : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

94.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do as <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in doA as' <- (ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in Append (as) (as'))) y) : Tlist Any
 in Append ([[]]) (ys)) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

95.
{-- E-Do and E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (doA ys' <- (Return [] : Tlist Any
 in Append ([[]]) (ys)) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

96.
{-- E-Do and E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (doA ys' <- (Append ([[]]) ([]) : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

97.
{-- E-Do and E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (doA ys' <- (Return [[]] : Tlist Any
 in Append ([[(1, 0)]]) (ys))
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

98.
{-- E-Do and E-Do and E-Do and E-DoRet --}

do result <- (doA y <- (do result <- (Append ([[(1, 0)]]) ([[]])
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

99.
{-- E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA y <- (do result <- (Return [[(1, 0)],[]]
 in \ z. parallel{} * Return z result) : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

100.
{-- E-Do and E-Do and E-DoRet --}

do result <- (doA y <- (\ z. parallel{} * Return z [[(1, 0)],[]] : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

101.
{-- E-Do and E-Do and E-AppAbs --}

do result <- (doA y <- (parallel{} * Return [[(1, 0)],[]] : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

102.
{-- E-Do and E-Do and E-HandRet --}

do result <- (doA y <- (Return [[(1, 0)],[]] : Any
 in doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys)))
 in \ z. parallel{} * Return z result)

103.
{-- E-Do and E-DoRet --}

do result <- (doA ys' <- (Map ([False]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

104.
{-- E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA y <- (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y False : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

105.
{-- E-Do and E-Do and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA y <- (parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) False : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

106.
{-- E-Do and E-Do and E-Do and E-Hand and E-AppAbs --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do b1 <- (Return False
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

107.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) False
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

108.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * do b <- (Return False
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

109.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * 
if False
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

110.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-IfTrue --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

111.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Hand and E-DoOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (handler{hDepthAmb2} * op "choose" () (y. do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

112.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-HandOp --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do k1 <- (Return \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (d) (-1)
 in k1 d'))))
 in do d' <- (Add (1) (-1)
 in k1 d'))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

113.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do d' <- (Add (1) (-1)
 in \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) d')
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

114.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do d' <- (Return 0
 in \ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) d')
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

115.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (\ d. do b <- (Eq (d) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (d) (-1)
 in k1 d')))) 0
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

116.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-AppAbs --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do b <- (Eq (0) (0)
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (0) (-1)
 in k1 d'))))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

117.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (do b <- (Return True
 in 
if b
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (0) (-1)
 in k1 d'))))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

118.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (
if True
 then Return []
 else do b1 <- (op "amb" [True,False] (y. Return y)
 in do k1 <- (\ y. handler{hDepthAmb2} * do b' <- (Return y
 in 
if b'
 then Return 2
 else Return 3) b1
 in do d' <- (Add (0) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

119.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Do and E-IfTrue --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * do xs <- (Return []
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

120.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-DoRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * ConcatMap ([]) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued)))))) : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

121.
{-- E-Do and E-Do and E-Do and E-Hand and E-Hand and E-Binop --}

do result <- (doA ys' <- (doA y <- (parallel{} * handler{hAmb} * Return [] : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

122.
{-- E-Do and E-Do and E-Do and E-Hand and E-HandRet --}

do result <- (doA ys' <- (doA y <- (parallel{} * Return [] : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

123.
{-- E-Do and E-Do and E-Do and E-HandRet --}

do result <- (doA ys' <- (doA y <- (Return [] : Any
 in doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([y]) (ys))) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

124.
{-- E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (doA ys' <- (Map ([]) (\ y. parallel{} * \ y. handler{hAmb} * do xs <- (do b1 <- (Return y
 in do k1 <- (\ y. handler{hDepthAmb2} * do b <- (Return y
 in 
if b
 then Return 1
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 2
 else Return 3)) b1
 in do d' <- (Add (1) (-1)
 in k1 d')))
 in ConcatMap (xs) (\ vd. do v <- (Fst vd
 in do rd <- (Snd vd
 in do consumed <- (Minus (1) (rd)
 in do trued <- (Minus (2) (consumed)
 in do k' <- (\ x. handler{hDepthAmb2} * do b <- (op "choose" () (y. Return y)
 in 
if b
 then Return x
 else do b' <- (op "choose" () (y. Return y)
 in 
if b'
 then Return 4
 else do b'' <- (op "choose" () (y. Return y)
 in 
if b''
 then Return 5
 else Return 6))) v
 in k' trued))))))) y) : Tlist Any
 in Append ([[]]) (ys)) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

125.
{-- E-Do and E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (doA ys' <- (Return [] : Tlist Any
 in Append ([[]]) (ys)) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

126.
{-- E-Do and E-Do and E-DoRet --}

do result <- (doA ys' <- (Append ([[]]) ([]) : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

127.
{-- E-Do and E-Do and E-Binop --}

do result <- (doA ys' <- (Return [[]] : Tlist Any
 in Append ([[[(1, 0)],[]]]) (ys))
 in \ z. parallel{} * Return z result)

128.
{-- E-Do and E-DoRet --}

do result <- (Append ([[[(1, 0)],[]]]) ([[]])
 in \ z. parallel{} * Return z result)

129.
{-- E-Do and E-Binop --}

do result <- (Return [[[(1, 0)],[]],[]]
 in \ z. parallel{} * Return z result)

130.
{-- E-DoRet --}

\ z. parallel{} * Return z [[[(1, 0)],[]],[]]

131.
{-- E-AppAbs --}

parallel{} * Return [[[(1, 0)],[]],[]]

132.
{-- E-HandRet --}

Return [[[(1, 0)],[]],[]]

133.
{-- Nothing --}

